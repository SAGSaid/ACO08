using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Threading;
using ACO08_Library.Communication.Networking.DeviceInterfacing;
using ACO08_Library.Public;
using ACO08_TestClient.Tools;
using ACO08_TestClient.Views;

namespace ACO08_TestClient.ViewModels
{
    public class DiscoveryViewModel : INotifyPropertyChanged, IDisposable
    {
        private readonly Frame _container;
        private readonly Dispatcher _dispatcher;

        private bool _isConnecting = false;

        private readonly DeviceLocator _locator;

        public ObservableCollection<ACO08_Device> Devices { get; } =
            new ObservableCollection<ACO08_Device>();

        public bool IsConnecting
        {
            get { return _isConnecting; }
            private set
            {
                _isConnecting = value;
                OnPropertyChanged();
            }
        }

        public ICommand StartConnectingCommand { get; }
        public ICommand ClearDevicesCommand { get; }

        public DiscoveryViewModel(Frame container)
        {
            _container = container;

            _container.Content = new DiscoveryView {DataContext = this};

            _dispatcher = Dispatcher.CurrentDispatcher;

            _locator = new DeviceLocator();
            _locator.DeviceLocated += DeviceLocatedHandler;
            _locator.StartLocating();

            #region Commands Init

            StartConnectingCommand =
                new RelayCommand(StartConnectingExecute);
            ClearDevicesCommand = 
                new RelayCommand(ClearDevicesExecute);

            #endregion
        }

        private async void StartConnectingExecute(object parameter)
        {
            if (parameter is ACO08_Device device)
            {
                IsConnecting = true;

                bool isConnected = await device.ConnectAsync();

                IsConnecting = false;

                if (isConnected)
                {
                    _container.Content = new DeviceView(device);
                }
                else
                {
                    MessageBox.Show("Connection failed.");
                }
            }
        }

        private void ClearDevicesExecute(object parameter)
        {
            _dispatcher.Invoke(() => Devices.Clear());
        }

        private void DeviceLocatedHandler(object sender, DeviceLocatedEventArgs args)
        {
            if (Devices.All(dev => dev.SerialNumber != args.SerialNumber))
            {
                _dispatcher.Invoke(() => Devices.Add(new ACO08_Device(args.SerialNumber, args.Address)));
            }
        }

        

        #region INotifyPropertyChanged

        // Autogenerated by ReSharper
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        } 
        #endregion

        public void Dispose()
        {
            _locator?.Dispose();
        }
    }
}
