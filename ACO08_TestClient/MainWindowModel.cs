using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using ACO08_Library;
using ACO08_Library.Data;

namespace ACO08_TestClient
{
    public class MainWindowModel : INotifyPropertyChanged
    {
        private readonly TestClientInterface _client = new TestClientInterface();

        private bool _isConnected = false;
        private CrimpData _data;

        public bool IsConnected
        {
            get { return _isConnected; }
            set
            {
                _isConnected = value;
                OnPropertyChanged();
            }
        }

        public CrimpData Data
        {
            get { return _data; }
            private set
            {
                _data = value;
                OnPropertyChanged();
            }
        }


        public async Task<string> TryConnectClient()
        {
            IsConnected = await _client.Start();

            if (IsConnected)
            {
                return "Successfully connected.";
            }
            else
            {
                return "Connecting failed.";
            }
        }

        public void StartReceivingData()
        {
            if (IsConnected)
            {
                _client.CrimpDataReceived += DataReceived;
            }
        }

        private void DataReceived(object sender, CrimpDataReceivedEventArgs e)
        {
            Data = e.Data;
        }


        #region INotifyPropertyChanged

        // Autogenerated by ReSharper
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        } 
        #endregion
    }
}
